{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React, { Component, createRef } from 'react';\nimport Touch from '../Touch/Touch';\nimport getClassName from '../../helpers/getClassName';\nimport classNames from '../../lib/classNames';\nimport { precisionRound } from '../Slider/Slider';\nimport withPlatform from '../../hoc/withPlatform';\nimport { canUseDOM } from '../../lib/dom';\n\nvar RangeSlider = /*#__PURE__*/function (_Component) {\n  _inherits(RangeSlider, _Component);\n\n  var _super = _createSuper(RangeSlider);\n\n  function RangeSlider(props) {\n    var _this;\n\n    _classCallCheck(this, RangeSlider);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"isControlledOutside\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"container\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"thumbStart\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"thumbEnd\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onStart\", function (e) {\n      var absolutePosition = _this.validateAbsolute(e.startX - _this.state.containerLeft);\n\n      var percentPosition = _this.absoluteToPecent(absolutePosition);\n\n      var _this$calcPercentRang = _this.calcPercentRange(percentPosition),\n          percentStart = _this$calcPercentRang.percentStart,\n          percentEnd = _this$calcPercentRang.percentEnd;\n\n      _this.onChange([_this.percentToValue(percentStart), _this.percentToValue(percentEnd)], e);\n\n      if (_this.isControlledOutside) {\n        _this.setState({\n          startX: absolutePosition\n        });\n      } else {\n        _this.setState({\n          startX: absolutePosition,\n          percentStart: percentStart,\n          percentEnd: percentEnd\n        });\n      }\n\n      var target = e.originalEvent.target;\n      var thumb = target.closest('.Slider__thumb');\n\n      if (thumb === _this.thumbStart.current) {\n        _this.setState({\n          active: 'start'\n        });\n      } else if (thumb === _this.thumbEnd.current) {\n        _this.setState({\n          active: 'end'\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMoveX\", function (e) {\n      var absolutePosition = _this.validateAbsolute(_this.state.startX + (e.shiftX || 0));\n\n      var percentPosition = _this.absoluteToPecent(absolutePosition);\n\n      var _this$calcPercentRang2 = _this.calcPercentRange(percentPosition),\n          percentStart = _this$calcPercentRang2.percentStart,\n          percentEnd = _this$calcPercentRang2.percentEnd;\n\n      _this.onChange([_this.percentToValue(percentStart), _this.percentToValue(percentEnd)], e);\n\n      if (!_this.isControlledOutside) {\n        _this.setState({\n          percentStart: percentStart,\n          percentEnd: percentEnd\n        });\n      }\n\n      e.originalEvent.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEnd\", function () {\n      _this.setState({\n        active: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function (callback) {\n      _this.setState({\n        containerLeft: _this.container.offsetLeft,\n        containerWidth: _this.container.offsetWidth\n      }, function () {\n        typeof callback === 'function' && callback();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getRef\", function (container) {\n      _this.container = container;\n      var getRootRef = _this.props.getRootRef;\n\n      if (getRootRef) {\n        if (typeof getRootRef === 'function') {\n          getRootRef(container);\n        } else {\n          getRootRef.current = container;\n        }\n      }\n    });\n\n    _this.state = {\n      startX: 0,\n      containerLeft: 0,\n      percentStart: 0,\n      percentEnd: 0,\n      active: null,\n      containerWidth: 0\n    };\n    _this.isControlledOutside = _this.props.hasOwnProperty('value');\n    _this.thumbStart = createRef();\n    _this.thumbEnd = createRef();\n    return _this;\n  }\n\n  _createClass(RangeSlider, [{\n    key: \"onChange\",\n    value: function onChange(value, e) {\n      this.props.onChange && this.props.onChange(value, e);\n    }\n  }, {\n    key: \"validateAbsolute\",\n    value: function validateAbsolute(absolute) {\n      var res = Math.max(0, Math.min(absolute, this.state.containerWidth));\n\n      if (this.props.step > 0) {\n        var stepCount = (this.props.max - this.props.min) / this.props.step;\n        var absStep = this.state.containerWidth / stepCount;\n        res = Math.round(res / absStep) * absStep;\n      }\n\n      return res;\n    }\n  }, {\n    key: \"validatePercent\",\n    value: function validatePercent(_ref) {\n      var percentStart = _ref.percentStart,\n          percentEnd = _ref.percentEnd;\n      return {\n        percentStart: Math.max(0, Math.min(percentStart, 100)),\n        percentEnd: Math.max(0, Math.min(percentEnd, 100))\n      };\n    }\n  }, {\n    key: \"absoluteToPecent\",\n    value: function absoluteToPecent(absolute) {\n      return absolute * 100 / this.state.containerWidth;\n    }\n  }, {\n    key: \"calcPercentRange\",\n    value: function calcPercentRange(percent) {\n      var _this$state = this.state,\n          percentStart = _this$state.percentStart,\n          percentEnd = _this$state.percentEnd;\n\n      if (percentStart === 100) {\n        return {\n          percentStart: percent,\n          percentEnd: percentEnd\n        };\n      } else if (percentEnd === 0) {\n        return {\n          percentEnd: percent,\n          percentStart: percentStart\n        };\n      } else if (Math.abs(percentStart - percent) <= Math.abs(percentEnd - percent)) {\n        return {\n          percentStart: percent,\n          percentEnd: percentEnd\n        };\n      } else {\n        return {\n          percentEnd: percent,\n          percentStart: percentStart\n        };\n      }\n    }\n  }, {\n    key: \"percentToValue\",\n    value: function percentToValue(percent) {\n      var res = percent * (this.props.max - this.props.min) / 100 + this.props.min;\n\n      if (this.props.step > 0) {\n        var stepFloatPart = \"\".concat(this.props.step).split('.')[1] || '';\n        return precisionRound(res, stepFloatPart.length);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"valueToPercent\",\n    value: function valueToPercent(_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          valueStart = _ref3[0],\n          valueEnd = _ref3[1];\n\n      return {\n        percentStart: (valueStart - this.props.min) * 100 / (this.props.max - this.props.min),\n        percentEnd: (valueEnd - this.props.min) * 100 / (this.props.max - this.props.min)\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (canUseDOM) {\n        window.addEventListener('resize', this.onResize);\n        this.onResize(function () {\n          _this2.setState(_this2.validatePercent(_this2.valueToPercent(_this2.value)));\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.isControlledOutside && prevProps.value !== this.props.value) {\n        this.setState(this.validatePercent(this.valueToPercent(this.props.value)));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          min = _this$props.min,\n          max = _this$props.max,\n          step = _this$props.step,\n          value = _this$props.value,\n          defaultValue = _this$props.defaultValue,\n          onChange = _this$props.onChange,\n          getRootRef = _this$props.getRootRef,\n          platform = _this$props.platform,\n          top = _this$props.top,\n          bottom = _this$props.bottom,\n          restProps = _objectWithoutProperties(_this$props, [\"className\", \"min\", \"max\", \"step\", \"value\", \"defaultValue\", \"onChange\", \"getRootRef\", \"platform\", \"top\", \"bottom\"]);\n\n      return /*#__PURE__*/React.createElement(\"div\", _extends({}, restProps, {\n        className: classNames(getClassName('Slider', platform), className),\n        ref: this.getRef\n      }), /*#__PURE__*/React.createElement(Touch, {\n        onStart: this.onStart,\n        onMoveX: this.onMoveX,\n        onEnd: this.onEnd,\n        className: \"Slider__in\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Slider__dragger\",\n        style: {\n          width: \"\".concat(this.state.percentEnd - this.state.percentStart, \"%\"),\n          left: \"\".concat(this.state.percentStart, \"%\")\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames('Slider__thumb', 'Slider__thumb--start', {\n          'Slider__thumb--active': this.state.active === 'start'\n        }),\n        ref: this.thumbStart\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames('Slider__thumb', 'Slider__thumb--end', {\n          'Slider__thumb--active': this.state.active === 'end'\n        }),\n        ref: this.thumbEnd\n      }))));\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      if (this.isControlledOutside) {\n        return this.props.value;\n      } else if (this.props.hasOwnProperty('defaultValue')) {\n        return this.props.defaultValue;\n      } else {\n        return [this.props.min, this.props.max];\n      }\n    }\n  }]);\n\n  return RangeSlider;\n}(Component);\n\n_defineProperty(RangeSlider, \"defaultProps\", {\n  min: 0,\n  max: 100,\n  step: 0\n});\n\nexport default withPlatform(RangeSlider);","map":null,"metadata":{},"sourceType":"module"}