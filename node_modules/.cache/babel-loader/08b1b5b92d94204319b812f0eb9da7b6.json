{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Touch from '../Touch/Touch';\nimport TouchRootContext from '../Touch/TouchContext';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport classNames from '../../lib/classNames';\nimport { IOS, ANDROID } from '../../lib/platform';\nimport getClassName from '../../helpers/getClassName';\nimport PullToRefreshSpinner from './PullToRefreshSpinner';\nimport withPlatform from '../../hoc/withPlatform';\nimport { canUseDOM } from '../../lib/dom';\n\nfunction cancelEvent(event) {\n  if (!event) {\n    return false;\n  }\n\n  while (event.originalEvent) {\n    event = event.originalEvent;\n  }\n\n  if (event.preventDefault) {\n    event.preventDefault();\n  }\n\n  if (event.stopPropagation) {\n    event.stopPropagation();\n  }\n\n  return false;\n}\n\nvar PullToRefresh = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PullToRefresh, _PureComponent);\n\n  var _super = _createSuper(PullToRefresh);\n\n  function PullToRefresh(props) {\n    var _this;\n\n    _classCallCheck(this, PullToRefresh);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"params\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"contentRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchStart\", function (e) {\n      if (_this.state.refreshing) {\n        cancelEvent(e);\n      }\n\n      _this.setState({\n        touchDown: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onWindowTouchMove\", function (event) {\n      if (_this.state.refreshing) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchMove\", function (e) {\n      var isY = e.isY,\n          shiftY = e.shiftY;\n      var _this$params = _this.params,\n          start = _this$params.start,\n          max = _this$params.max;\n      var pageYOffset = _this.window.pageYOffset;\n      var _this$state = _this.state,\n          refreshing = _this$state.refreshing,\n          watching = _this$state.watching,\n          touchDown = _this$state.touchDown;\n\n      if (watching && touchDown) {\n        cancelEvent(e);\n        var positionMultiplier = _this.params.positionMultiplier;\n        var shift = Math.max(0, shiftY - _this.state.touchY);\n        var currentY = Math.max(start, Math.min(_this.params.maxY, start + shift * positionMultiplier));\n        var progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n\n        _this.setState({\n          spinnerY: currentY,\n          spinnerProgress: Math.min(80, Math.max(0, progress)),\n          canRefresh: progress > 80,\n          contentShift: (currentY + 10) * 2.3\n        });\n\n        if (progress > 85 && !refreshing && _this.props.platform === IOS) {\n          _this.runRefreshing();\n        }\n      } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {\n        cancelEvent(e);\n\n        _this.setState({\n          watching: true,\n          touchY: shiftY,\n          spinnerY: start,\n          spinnerProgress: 0\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchEnd\", function () {\n      var _this$state2 = _this.state,\n          refreshing = _this$state2.refreshing,\n          canRefresh = _this$state2.canRefresh,\n          refreshingFinished = _this$state2.refreshingFinished;\n\n      _this.setState({\n        watching: false,\n        touchDown: false\n      }, function () {\n        if (canRefresh && !refreshing) {\n          _this.runRefreshing();\n        } else if (refreshing && refreshingFinished) {\n          _this.resetRefreshingState();\n        } else {\n          _this.setState({\n            spinnerY: refreshing ? _this.params.refreshing : _this.params.start,\n            spinnerProgress: 0,\n            contentShift: 0\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefreshingFinish\", function () {\n      _this.setState({\n        refreshingFinished: true\n      }, function () {\n        !_this.state.touchDown && _this.resetRefreshingState();\n      });\n    });\n\n    _this.params = {\n      start: props.platform === ANDROID ? -45 : -10,\n      max: props.platform === ANDROID ? 80 : 50,\n      maxY: props.platform === ANDROID ? 80 : 400,\n      refreshing: props.platform === ANDROID ? 50 : 36,\n      positionMultiplier: props.platform === ANDROID ? 1 : 0.21\n    };\n    _this.state = {\n      watching: false,\n      refreshing: false,\n      canRefresh: false,\n      touchDown: false,\n      refreshingFinished: false,\n      touchY: 0,\n      spinnerY: _this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0\n    };\n    _this.contentRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(PullToRefresh, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (canUseDOM) {\n        this.document.addEventListener('touchmove', this.onWindowTouchMove, {\n          cancelable: true,\n          passive: false\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Здесь нужен последний аргумент с такими же параметрами, потому что\n      // некоторые браузеры на странных вендорах типа Meizu не удаляют обработчик.\n      // https://github.com/VKCOM/VKUI/issues/444\n      if (canUseDOM) {\n        this.document.removeEventListener('touchmove', this.onWindowTouchMove, {\n          cancelable: true,\n          passive: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isFetching && !this.props.isFetching) {\n        this.onRefreshingFinish();\n      }\n    }\n  }, {\n    key: \"runRefreshing\",\n    value: function runRefreshing() {\n      if (!this.state.refreshing && this.props.onRefresh) {\n        this.setState({\n          refreshing: true,\n          spinnerY: this.props.platform === ANDROID ? this.params.refreshing : this.state.spinnerY\n        });\n        this.props.onRefresh();\n      }\n    }\n  }, {\n    key: \"resetRefreshingState\",\n    value: function resetRefreshingState() {\n      this.setState({\n        watching: false,\n        canRefresh: false,\n        refreshing: false,\n        refreshingFinished: false,\n        spinnerY: this.params.start,\n        spinnerProgress: 0,\n        contentShift: 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          onRefresh = _this$props.onRefresh,\n          isFetching = _this$props.isFetching,\n          platform = _this$props.platform,\n          restProps = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"onRefresh\", \"isFetching\", \"platform\"]);\n\n      var _this$state3 = this.state,\n          watching = _this$state3.watching,\n          refreshing = _this$state3.refreshing,\n          spinnerY = _this$state3.spinnerY,\n          spinnerProgress = _this$state3.spinnerProgress,\n          canRefresh = _this$state3.canRefresh,\n          touchDown = _this$state3.touchDown,\n          contentShift = _this$state3.contentShift;\n      var spinnerTransform = \"translate3d(0, \".concat(spinnerY, \"px, 0)\");\n      var contentTransform = '';\n\n      if (platform === IOS && refreshing && !touchDown) {\n        contentTransform = 'translate3d(0, 100px, 0)';\n      } else if (platform === IOS && contentShift) {\n        contentTransform = \"translate3d(0, \".concat(contentShift, \"px, 0)\");\n      }\n\n      return /*#__PURE__*/React.createElement(TouchRootContext.Provider, {\n        value: true\n      }, /*#__PURE__*/React.createElement(Touch, _extends({}, restProps, {\n        onStart: this.onTouchStart,\n        onMove: this.onTouchMove,\n        onEnd: this.onTouchEnd,\n        className: classNames(getClassName('PullToRefresh', platform), className, {\n          'PullToRefresh--watching': watching,\n          'PullToRefresh--refreshing': refreshing\n        })\n      }), /*#__PURE__*/React.createElement(FixedLayout, {\n        className: \"PullToRefresh__controls\"\n      }, /*#__PURE__*/React.createElement(PullToRefreshSpinner, {\n        style: {\n          transform: spinnerTransform,\n          WebkitTransform: spinnerTransform,\n          opacity: watching || refreshing || canRefresh ? 1 : 0\n        },\n        on: refreshing,\n        progress: refreshing ? null : spinnerProgress\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"PullToRefresh__content\",\n        ref: this.contentRef,\n        style: {\n          transform: contentTransform,\n          WebkitTransform: contentTransform\n        }\n      }, children)));\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.context.document || document;\n    }\n  }, {\n    key: \"window\",\n    get: function get() {\n      return this.context.window || window;\n    }\n  }]);\n\n  return PullToRefresh;\n}(PureComponent);\n\n_defineProperty(PullToRefresh, \"contextTypes\", {\n  window: PropTypes.any,\n  document: PropTypes.any\n});\n\nexport default withPlatform(PullToRefresh);","map":null,"metadata":{},"sourceType":"module"}