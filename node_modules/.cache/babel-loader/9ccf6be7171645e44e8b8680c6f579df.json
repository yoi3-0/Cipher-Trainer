{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React, { Component } from 'react';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport transitionEvents from '../../lib/transitionEvents';\nimport withPlatform from '../../hoc/withPlatform';\n\nvar PanelHeaderContext = /*#__PURE__*/function (_Component) {\n  _inherits(PanelHeaderContext, _Component);\n\n  var _super = _createSuper(PanelHeaderContext);\n\n  function PanelHeaderContext() {\n    var _this;\n\n    _classCallCheck(this, PanelHeaderContext);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      closing: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"elementRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"onAnimationFinish\", function () {\n      _this.setState({\n        closing: false\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PanelHeaderContext, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.opened !== prevProps.opened) {\n        if (this.props.opened === false) {\n          this.setState({\n            closing: true\n          });\n          this.waitAnimationFinish(this.onAnimationFinish);\n        }\n      }\n    }\n  }, {\n    key: \"waitAnimationFinish\",\n    value: function waitAnimationFinish(eventHandler) {\n      var eventName = transitionEvents.animationEndEventName;\n      var element = this.elementRef.current;\n\n      if (element) {\n        element.removeEventListener(eventName, eventHandler);\n        element.addEventListener(eventName, eventHandler);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          opened = _this$props.opened,\n          onClose = _this$props.onClose,\n          platform = _this$props.platform,\n          restProps = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"opened\", \"onClose\", \"platform\"]);\n\n      var closing = this.state.closing;\n      var baseClassNames = getClassName('PanelHeaderContext', platform);\n      return /*#__PURE__*/React.createElement(FixedLayout, _extends({}, restProps, {\n        className: classNames(baseClassNames, {\n          'PanelHeaderContext--opened': opened,\n          'PanelHeaderContext--closing': closing\n        }, className),\n        vertical: \"top\"\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"PanelHeaderContext__in\",\n        ref: this.elementRef\n      }, (opened || closing) && children), (opened || closing) && /*#__PURE__*/React.createElement(\"div\", {\n        onClick: onClose,\n        className: \"PanelHeaderContext__fade\"\n      }));\n    }\n  }]);\n\n  return PanelHeaderContext;\n}(Component);\n\n_defineProperty(PanelHeaderContext, \"defaultProps\", {\n  opened: false\n});\n\nexport default withPlatform(PanelHeaderContext);","map":null,"metadata":{},"sourceType":"module"}